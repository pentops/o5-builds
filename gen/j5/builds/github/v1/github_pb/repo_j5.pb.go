// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package github_pb

import (
	driver "database/sql/driver"
	fmt "fmt"

	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *RepoKeys) Clone() any {
	return proto.Clone(msg).(*RepoKeys)
}
func (msg *RepoKeys) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoKeys) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *RepoState) Clone() any {
	return proto.Clone(msg).(*RepoState)
}
func (msg *RepoState) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoState) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *RepoStateData) Clone() any {
	return proto.Clone(msg).(*RepoStateData)
}
func (msg *RepoStateData) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoStateData) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *RepoEvent) Clone() any {
	return proto.Clone(msg).(*RepoEvent)
}
func (msg *RepoEvent) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoEvent) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// RepoEventType is a oneof wrapper
type RepoEventTypeKey string

const (
	RepoEvent_Type_Configure       RepoEventTypeKey = "configure"
	RepoEvent_Type_ConfigureBranch RepoEventTypeKey = "configureBranch"
	RepoEvent_Type_RemoveBranch    RepoEventTypeKey = "removeBranch"
)

func (x *RepoEventType) TypeKey() (RepoEventTypeKey, bool) {
	switch x.Type.(type) {
	case *RepoEventType_Configure_:
		return RepoEvent_Type_Configure, true
	case *RepoEventType_ConfigureBranch_:
		return RepoEvent_Type_ConfigureBranch, true
	case *RepoEventType_RemoveBranch_:
		return RepoEvent_Type_RemoveBranch, true
	default:
		return "", false
	}
}

type IsRepoEventTypeWrappedType interface {
	TypeKey() RepoEventTypeKey
	proto.Message
}

func (x *RepoEventType) Set(val IsRepoEventTypeWrappedType) {
	switch v := val.(type) {
	case *RepoEventType_Configure:
		x.Type = &RepoEventType_Configure_{Configure: v}
	case *RepoEventType_ConfigureBranch:
		x.Type = &RepoEventType_ConfigureBranch_{ConfigureBranch: v}
	case *RepoEventType_RemoveBranch:
		x.Type = &RepoEventType_RemoveBranch_{RemoveBranch: v}
	}
}
func (x *RepoEventType) Get() IsRepoEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *RepoEventType_Configure_:
		return v.Configure
	case *RepoEventType_ConfigureBranch_:
		return v.ConfigureBranch
	case *RepoEventType_RemoveBranch_:
		return v.RemoveBranch
	default:
		return nil
	}
}
func (x *RepoEventType_Configure) TypeKey() RepoEventTypeKey {
	return RepoEvent_Type_Configure
}
func (x *RepoEventType_ConfigureBranch) TypeKey() RepoEventTypeKey {
	return RepoEvent_Type_ConfigureBranch
}
func (x *RepoEventType_RemoveBranch) TypeKey() RepoEventTypeKey {
	return RepoEvent_Type_RemoveBranch
}
func (msg *RepoEventType) Clone() any {
	return proto.Clone(msg).(*RepoEventType)
}

type IsRepoEventType_Type = isRepoEventType_Type

func (msg *RepoEventType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoEventType_Configure) Clone() any {
	return proto.Clone(msg).(*RepoEventType_Configure)
}
func (msg *RepoEventType_Configure) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoEventType_Configure) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *RepoEventType_ConfigureBranch) Clone() any {
	return proto.Clone(msg).(*RepoEventType_ConfigureBranch)
}
func (msg *RepoEventType_ConfigureBranch) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoEventType_ConfigureBranch) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *RepoEventType_RemoveBranch) Clone() any {
	return proto.Clone(msg).(*RepoEventType_RemoveBranch)
}
func (msg *RepoEventType_RemoveBranch) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RepoEventType_RemoveBranch) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *Branch) Clone() any {
	return proto.Clone(msg).(*Branch)
}
func (msg *Branch) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *Branch) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// DeployTargetType is a oneof wrapper
type DeployTargetTypeKey string

const (
	DeployTarget_Type_J5Build DeployTargetTypeKey = "j5Build"
	DeployTarget_Type_O5Build DeployTargetTypeKey = "o5Build"
)

func (x *DeployTargetType) TypeKey() (DeployTargetTypeKey, bool) {
	switch x.Type.(type) {
	case *DeployTargetType_J5Build_:
		return DeployTarget_Type_J5Build, true
	case *DeployTargetType_O5Build_:
		return DeployTarget_Type_O5Build, true
	default:
		return "", false
	}
}

type IsDeployTargetTypeWrappedType interface {
	TypeKey() DeployTargetTypeKey
	proto.Message
}

func (x *DeployTargetType) Set(val IsDeployTargetTypeWrappedType) {
	switch v := val.(type) {
	case *DeployTargetType_J5Build:
		x.Type = &DeployTargetType_J5Build_{J5Build: v}
	case *DeployTargetType_O5Build:
		x.Type = &DeployTargetType_O5Build_{O5Build: v}
	}
}
func (x *DeployTargetType) Get() IsDeployTargetTypeWrappedType {
	switch v := x.Type.(type) {
	case *DeployTargetType_J5Build_:
		return v.J5Build
	case *DeployTargetType_O5Build_:
		return v.O5Build
	default:
		return nil
	}
}
func (x *DeployTargetType_J5Build) TypeKey() DeployTargetTypeKey {
	return DeployTarget_Type_J5Build
}
func (x *DeployTargetType_O5Build) TypeKey() DeployTargetTypeKey {
	return DeployTarget_Type_O5Build
}
func (msg *DeployTargetType) Clone() any {
	return proto.Clone(msg).(*DeployTargetType)
}

type IsDeployTargetType_Type = isDeployTargetType_Type

func (msg *DeployTargetType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *DeployTargetType_J5Build) Clone() any {
	return proto.Clone(msg).(*DeployTargetType_J5Build)
}
func (msg *DeployTargetType_J5Build) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *DeployTargetType_J5Build) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *DeployTargetType_O5Build) Clone() any {
	return proto.Clone(msg).(*DeployTargetType_O5Build)
}
func (msg *DeployTargetType_O5Build) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *DeployTargetType_O5Build) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// RepoStatus
const (
	RepoStatus_UNSPECIFIED RepoStatus = 0
	RepoStatus_ACTIVE      RepoStatus = 1
)

var (
	RepoStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
	}
	RepoStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
	}
	RepoStatus_value_either = map[string]int32{
		"UNSPECIFIED":             0,
		"REPO_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                  1,
		"REPO_STATUS_ACTIVE":      1,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x RepoStatus) ShortString() string {
	return RepoStatus_name_short[int32(x)]
}
func (x RepoStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *RepoStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := RepoStatus_value_either[strVal]
	*x = RepoStatus(val)
	return nil
}
